spring:
  shardingsphere:
    datasource:
      names: ds0
      ds0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://www.xdblog.site:3308/feed_demo0?serverTimezone=GMT%2B8
        username: root
        password: 1234567
    props:
      sql-show: true
    rules:
      sharding:
        tables: # 数据分片规则配置
          feed_info: # 逻辑表名称
            actualDataNodes: ds0.feed_info->{0..1} # 由数据源名 + 表名组成（参考Inline语法规则）
            tableStrategy: # 分表策略，同分库策略
              standard: # 用于单分片键的标准分片场景
                shardingColumn: user_id # 分片列名称
                shardingAlgorithmName: my-table # 分片算法名称
            keyGenerateStrategy: # 分布式序列策略
              column: id # 自增列名称，缺省表示不使用自增主键生成器
              keyGeneratorName: my-key # 分布式序列算法名称
        shardingAlgorithms:
          my-table: # 分片算法名称
            type: INLINE  # 分片算法类型
            props: # 分片算法属性配置
              algorithm-expression: feed_info_$->{user_id % 2}
        keyGenerators:
          my-key: # 分布式序列算法名称
            type: SNOWFLAKE # 分布式序列算法类型
#      readwriteSplitting:
#        dataSources:
#          ds:
#            loadBalancerName: my-load
#            writeDataSourceName: master1
#            readDataSourceNames: slave1
#        loadBalancers:
#          my-load: # 负载均衡算法名称
#            type: ROUND_ROBIN # 负载均衡算法类型